{
  "ConnectionStrings": {
    "DefaultConnectionString": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Marvel;Integrated Security=True"
    //"DefaultConnectionString": "Data Source=MJ021KNV;Initial Catalog=Marvel;Integrated Security=True"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*"
}

/*
 * Una de las razones por las cuales es mala práctica hard-codear el ConnectionString en el código
 * es porque si tu utilizas un usuario y password entonces tu estas revelando dicha información
 * a cualquier persona que tenga acceso a tu código fuente, lo cual no es muy seguro, así que por
 * eso se prefiere utilizar fuentes externas. Lo ideal sería colocarlo en un lugar donde ni siquiera
 * cualquier programador tenga acceso a este, como por ejemplo en una variable de ambiente del servidor.
 * De nuevo, esto aprenderemos a hacerlo en el módulo de configuraciones, por ahora para este demo
 * colocar el ConnectionString acá, es suficiente.
 *
 * Vamos entonces a crear una migración. En EF una migración es una clase de C# la cual contiene los
 * cambios que van a ser realizados sobre la base de datos. La idea es que cuando hacemos cambios a
 * nuestros modelos o a nuestro contexto de datos podemos crear una nueva migración la cual va a indicar
 * los cambios correspondientes que se haran en la base de datos para que reflejen los cambios que
 * hicimos en nuestro código de C#.
 *
 * Dado que estamos utilizando Visual Studio, podemos ir al Package Manager Console (PM) y escribir
 * Add-Migration y le ponemos un nombre a la migración, yo le voy a poner Initial, quedando:
 * Add-Migration Initial
 * 
 * Nota: Para deshacer la migración, se utiliza el comando: Remove-Migration.
 * 
 * Como la base de datos no existe, EF Core la crea utilizando el comando: Update-Database
 *
 * Nota: Para revertir la última migración aplicada escribir: Update-Database <nombre-migracion-anterior>
 * luego remover del proyecto el archivo de la migración y por último, escribir: Remove-Migration
 * 
 * Por medio del Explorador de Objetos de SQL Server se puede observar que se ha creado la base de datos
 * Marvel y la tabla AvengerItems con sus respectiva columnas (Id y Name). Ahora, lo que vamos a hacer
 * es que vamos a crear nuestro controlador para poder interactuar con la tabla AvengerItems.
 */
